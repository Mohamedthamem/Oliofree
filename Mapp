import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, Button, StyleSheet, ScrollView, Image, TouchableOpacity, Alert, Switch, Dimensions } from 'react-native';
import AsyncStorage from '@react-native-community/async-storage';
import MapView, { Marker } from 'react-native-maps';
import * as Location from 'expo-location'; // Use expo-location for geolocation in Expo

export default function App() {
  const [screen, setScreen] = useState('register'); // 'register', 'login', 'home', 'explore'
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [user, setUser] = useState(null);
  const [mapRegion, setMapRegion] = useState({
    latitude: 11.0168, // Default to Kalapatti
    longitude: 76.9558,
    latitudeDelta: 0.01,
    longitudeDelta: 0.01,
  });
  const [searchQuery, setSearchQuery] = useState('');
  const [isMapView, setIsMapView] = useState(true); // Toggle between list and map

  useEffect(() => {
    checkLoginStatus();
    requestLocationPermission();
  }, []);

  const checkLoginStatus = async () => {
    const storedUser = await AsyncStorage.getItem('user');
    if (storedUser) {
      setUser(JSON.parse(storedUser));
      setScreen('home'); // Default to home after login
    }
  };

  const requestLocationPermission = async () => {
    let { status } = await Location.requestForegroundPermissionsAsync();
    if (status !== 'granted') {
      Alert.alert('Permission Denied', 'Location permission is required for Locate me.');
      return;
    }
  };

  const handleRegister = async () => {
    if (!username || !email || !password) {
      Alert.alert('Error', 'Please fill all fields');
      return;
    }
    try {
      const response = await fetch('http://your-server-url/api/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, email, password }),
      });
      const data = await response.json();
      if (response.ok) {
        await AsyncStorage.setItem('user', JSON.stringify({ username, email }));
        Alert.alert('Success', data.message);
        setScreen('login');
      } else {
        Alert.alert('Error', data.message);
      }
    } catch (error) {
      Alert.alert('Error', 'Registration failed');
    }
  };

  const handleLogin = async () => {
    if (!email || !password) {
      Alert.alert('Error', 'Please fill all fields');
      return;
    }
    try {
      const response = await fetch('http://your-server-url/api/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });
      const data = await response.json();
      if (response.ok) {
        await AsyncStorage.setItem('user', JSON.stringify({ username: 'TestUser', email }));
        setUser({ username: 'TestUser', email });
        setScreen('home');
      } else {
        Alert.alert('Error', data.message);
      }
    } catch (error) {
      Alert.alert('Error', 'Login failed');
    }
  };

  const handleLogout = async () => {
    await AsyncStorage.removeItem('user');
    setUser(null);
    setScreen('login');
  };

  const locateMe = async () => {
    try {
      let location = await Location.getCurrentPositionAsync({});
      const { latitude, longitude } = location.coords;
      setMapRegion({
        latitude,
        longitude,
        latitudeDelta: 0.01,
        longitudeDelta: 0.01,
      });
      Alert.alert('Success', 'Location updated to your current position!');
    } catch (error) {
      Alert.alert('Error', 'Unable to get location. Check permissions.');
    }
  };

  const searchLocation = async () => {
    if (!searchQuery) {
      Alert.alert('Error', 'Please enter a location or keyword.');
      return;
    }
    try {
      const response = await fetch(
        `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(searchQuery)}&key=YOUR_GOOGLE_MAPS_API_KEY`
      );
      const data = await response.json();
      if (data.results.length > 0) {
        const { lat, lng } = data.results[0].geometry.location;
        setMapRegion({
          latitude: lat,
          longitude: lng,
          latitudeDelta: 0.01,
          longitudeDelta: 0.01,
        });
        Alert.alert('Success', `Moved to ${searchQuery}!`);
      } else {
        Alert.alert('Error', 'Location not found.');
      }
    } catch (error) {
      Alert.alert('Error', 'Search failed. Check your API key or internet connection.');
    }
  };

  // Render appropriate screen
  if (screen === 'register') {
    return (
      <View style={styles.container}>
        <Text style={styles.title}>Register</Text>
        <TextInput style={styles.input} placeholder="Username" value={username} onChangeText={setUsername} />
        <TextInput style={styles.input} placeholder="Email" value={email} onChangeText={setEmail} keyboardType="email-address" />
        <TextInput style={styles.input} placeholder="Password" value={password} onChangeText={setPassword} secureTextEntry />
        <Button title="Register" onPress={handleRegister} />
        <Button title="Already have an account? Login" onPress={() => setScreen('login')} />
      </View>
    );
  }

  if (screen === 'login') {
    return (
      <View style={styles.container}>
        <Text style={styles.title}>Login</Text>
        <TextInput style={styles.input} placeholder="Email" value={email} onChangeText={setEmail} keyboardType="email-address" />
        <TextInput style={styles.input} placeholder="Password" value={password} onChangeText={setPassword} secureTextEntry />
        <Button title="Login" onPress={handleLogin} />
        <Button title="Need an account? Register" onPress={() => setScreen('register')} />
      </View>
    );
  }

  if (screen === 'home') {
    return (
      <ScrollView style={styles.container}>
        <View style={styles.header}>
          <Text style={styles.greeting}>Good evening, {user?.username || 'User'}</Text>
          <Text style={styles.location}>@ Kalapatti</Text>
          <Text style={styles.listings}>Listings within 5km</Text>
        </View>

        <Text style={styles.sectionTitle}>Get started</Text>
        <View style={styles.getStartedRow}>
          <View style={styles.getStartedCard}>
            <Image source={{ uri: 'https://via.placeholder.com/100?text=See+something' }} style={styles.cardImage} />
            <Text style={styles.cardText}>See something you like?</Text>
          </View>
          <View style={styles.getStartedCard}>
            <Image source={{ uri: 'https://via.placeholder.com/100?text=Wait+I+can' }} style={styles.cardImage} />
            <Text style={styles.cardText}>Wait... I can give that away?</Text>
          </View>
          <View style={styles.getStartedCard}>
            <Image source={{ uri: 'https://via.placeholder.com/100?text=3+things' }} style={styles.cardImage} />
            <Text style={styles.cardText}>3 things you might not know</Text>
          </View>
        </View>

        <TouchableOpacity style={styles.badgeButton} onPress={() => Alert.alert('Badge', 'Unlocked! Check profile.')}>
          <Text style={styles.badgeText}>Unlock your 'First request' badge now</Text>
        </TouchableOpacity>

        <View style={styles.categoriesRow}>
          <TouchableOpacity style={[styles.categoryTile, styles.freeFood]} onPress={() => Alert.alert('Category', 'Viewing Free Food!')}>
            <Text style={styles.categoryText}>Free food</Text>
          </TouchableOpacity>
          <TouchableOpacity style={[styles.categoryTile, styles.freeNonFood]} onPress={() => Alert.alert('Category', 'Viewing Free Non-Food!')}>
            <Text style={styles.categoryText}>Free non-food</Text>
          </TouchableOpacity>
        </View>
        <View style={styles.categoriesRow}>
          <TouchableOpacity style={[styles.categoryTile, styles.forSale]} onPress={() => Alert.alert('Category', 'Viewing For Sale!')}>
            <Text style={styles.categoryText}>For sale</Text>
          </TouchableOpacity>
          <TouchableOpacity style={[styles.categoryTile, styles.borrow]} onPress={() => Alert.alert('Category', 'Viewing Borrow!')}>
            <Text style={styles.categoryText}>Borrow</Text>
          </TouchableOpacity>
        </View>
        <View style={styles.categoriesRow}>
          <TouchableOpacity style={[styles.categoryTile, styles.wanted]} onPress={() => Alert.alert('Category', 'Viewing Wanted!')}>
            <Text style={styles.categoryText}>Wanted</Text>
          </TouchableOpacity>
        </View>

        <Button title="Go to Explore" onPress={() => setScreen('explore')} style={styles.logoutButton} />
        <Button title="Logout" onPress={handleLogout} style={styles.logoutButton} />
      </ScrollView>
    );
  }

  if (screen === 'explore') {
    return (
      <View style={styles.container}>
        <Text style={styles.header}>Explore</Text>
        <TextInput
          style={styles.searchInput}
          placeholder="Search location or keyword..."
          value={searchQuery}
          onChangeText={setSearchQuery}
          onSubmitEditing={searchLocation}
        />
        <View style={styles.toggleRow}>
          <Text>List</Text>
          <Switch
            trackColor={{ false: 'gray', true: '#7C3AED' }}
            onValueChange={() => setIsMapView(!isMapView)}
            value={isMapView}
          />
          <Text>Map</Text>
        </View>
        <View style={styles.typeRow}>
          <Text>Type (7)</Text>
        </View>
        {isMapView && (
          <View style={styles.mapContainer}>
            <MapView
              style={styles.map}
              region={mapRegion}
              onRegionChangeComplete={setMapRegion}
            >
              <Marker coordinate={mapRegion} title="Your Location" />
            </MapView>
            <Button title="Locate me" onPress={locateMe} style={styles.locateButton} />
          </View>
        )}
        <View style={styles.searchAreaButton}>
          <Text style={styles.searchAreaText}>Search this area</Text>
        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#f8f8f8', paddingTop: 20 },
  title: { fontSize: 24, fontWeight: 'bold', textAlign: 'center', margin: 20 },
  input: { height: 40, borderColor: 'gray', borderWidth: 1, margin: 10, padding: 10, borderRadius: 5 },
  header: { fontSize: 24, fontWeight: 'bold', padding: 20 },
  greeting: { fontSize: 24, fontWeight: 'bold', marginBottom: 5 },
  location: { fontSize: 16, color: 'gray', marginBottom: 2 },
  listings: { fontSize: 14, color: 'gray' },
  sectionTitle: { fontSize: 20, fontWeight: 'bold', paddingHorizontal: 20, marginVertical: 10 },
  getStartedRow: { flexDirection: 'row', justifyContent: 'space-around', paddingHorizontal: 10 },
  getStartedCard: { width: '30%', height: 120, justifyContent: 'center', alignItems: 'center', backgroundColor: 'white', borderRadius: 10 },
  cardImage: { width: 50, height: 50, marginBottom: 10 },
  cardText: { fontSize: 12, textAlign: 'center' },
  badgeButton: { backgroundColor: '#7C3AED', padding: 15, borderRadius: 10, margin: 20, alignItems: 'center' },
  badgeText: { color: 'white', fontWeight: 'bold' },
  categoriesRow: { flexDirection: 'row', justifyContent: 'space-around', marginVertical: 5 },
  categoryTile: { width: '45%', height: 80, justifyContent: 'center', alignItems: 'center', borderRadius: 10 },
  categoryText: { fontWeight: 'bold', color: 'white' },
  freeFood: { backgroundColor: '#10B981' },
  freeNonFood: { backgroundColor: '#8B5CF6' },
  forSale: { backgroundColor: '#F59E0B' },
  borrow: { backgroundColor: '#06B6D4' },
  wanted: { backgroundColor: '#FCD34D', width: '45%' },
  logoutButton: { margin: 20 },
  searchInput: { backgroundColor: 'white', padding: 15, margin: 20, borderRadius: 10, fontSize: 16 },
  toggleRow: { flexDirection: 'row', justifyContent: 'space-between', paddingHorizontal: 20 },
  typeRow: { paddingHorizontal: 20, marginVertical: 10 },
  mapContainer: { flex: 1, margin: 20 },
  map: { width: '100%', height: Dimensions.get('window').height * 0.5 },
  searchAreaButton: { backgroundColor: 'white', padding: 10, alignItems: 'center', margin: 20, borderRadius: 20 },
  searchAreaText: { color: '#7C3AED', fontWeight: 'bold' },
  locateButton: { margin: 10 },
});
